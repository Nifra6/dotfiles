#!/bin/zsh
# ---------------------------------------------------------
# ---                 zsh run commands                  ---
# ---------------------------------------------------------


# -- History
# ---------------------------
HISTFILE=${ZDOTDIR}/.histfile
HISTSIZE=1000
SAVEHIST=5000


# -- Completion
# ---------------------------
fpath+=${ZDOTDIR}/completions
autoload -Uz compinit && compinit
zstyle ':completion:*' menu select
# matcher-list 'm:{a-zA-Z}={A-Za-z}'


# -- Aliases
# ---------------------------
source ${ZDOTDIR}/aliases


# -- Prompt
# ---------------------------
setopt prompt_subst
autoload -Uz vcs_info
precmd () { vcs_info }
zstyle ':vcs_info:git:*' formats '%b'
get_vcs_info_prompt() {
    if [[ -n $vcs_info_msg_0_ ]]; then
        echo " %F{green}%B%F{black}%K{green}%B ${vcs_info_msg_0_}%b%F{green}%k"
    else
        echo ""
    fi
}
PROMPT='%F{magenta}%B%F{black}%K{magenta}%B%n@%m%b%F{magenta}%k$(get_vcs_info_prompt)%f%k%B %D{%A %d %B} %D{%H:%M}
%}%F{magenta}%k%B%~/%b%k%f '


# -- Keybindings
# ---------------------------
typeset -g -A key
key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi


# -- Miscellaneous
# ---------------------------
bindkey -v
source ${HOME}/.config/ranger/shell_automatic_cd.sh


# -- Host specific conf
# ---------------------------

case $DISTRO in

    "Ubuntu") 
        # -- Suggestions and colours
        # ---------------------------
        source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
        ;;
    "Arch Linux")
        # -- Suggestions and colours
        # ---------------------------
        source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
        ;;
esac



case $HOSTNAME in

    "gonto")
        # -- Conda
        # ---------------------------
        __conda_setup="$('/home/nmaignan/Applications/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        else
            if [ -f "/home/nmaignan/Applications/miniconda3/etc/profile.d/conda.sh" ]; then
                . "/home/nmaignan/Applications/miniconda3/etc/profile.d/conda.sh"
            else
                export PATH="/home/nmaignan/Applications/miniconda3/bin:$PATH"
            fi
        fi
        unset __conda_setup
        # -- Miscellaneous
        # ---------------------------
        fpath+=${HOME}/Applications/conda-zsh-completion
        compinit
        zstyle ':completion::complete:*' use-cache 1
        zstyle ":conda_zsh_completion:*" sort-envs-by-time true
        zstyle ":conda_zsh_completion:*" show-global-envs-first true
        ;;

    "nascane")
        # -- Conda
        # ---------------------------
        __conda_setup="$('/home/nifra/Applications/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        else
            if [ -f "/home/nifra/Applications/miniconda3/etc/profile.d/conda.sh" ]; then
                . "/home/nifra/Applications/miniconda3/etc/profile.d/conda.sh"
            else
                export PATH="/home/nifra/Applications/miniconda3/bin:$PATH"
            fi
        fi
        unset __conda_setup
        ;;

    "wrandrall")
        rfkill unblock bluetooth
        ;;

    *)
        echo "ptdr t ki"
        ;;

esac
